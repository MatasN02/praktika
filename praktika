import sqlite3

class AcademicSystem:
    def __init__(self):
        self.conn = sqlite3.connect(":memory:")  # In-memory SQLite database
        self.cursor = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS students (
                id INTEGER PRIMARY KEY,
                first_name TEXT,
                last_name TEXT,
                group_id INTEGER
            )
        ''')

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS teachers (
                id INTEGER PRIMARY KEY,
                first_name TEXT,
                last_name TEXT
            )
        ''')

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS groups (
                id INTEGER PRIMARY KEY,
                name TEXT
            )
        ''')

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS subjects (
                id INTEGER PRIMARY KEY,
                name TEXT
            )
        ''')

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS enrollments (
                student_id INTEGER,
                subject_id INTEGER,
                PRIMARY KEY (student_id, subject_id)
            )
        ''')

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS grades (
                student_id INTEGER,
                subject_id INTEGER,
                teacher_id INTEGER,
                grade INTEGER,
                PRIMARY KEY (student_id, subject_id, teacher_id)
            )
        ''')

    def register_student(self, first_name, last_name, group_id):
        login_name = first_name
        password = last_name
        self.cursor.execute('''
            INSERT INTO students (first_name, last_name, group_id)
            VALUES (?, ?, ?)
        ''', (first_name, last_name, group_id))
        self.conn.commit()
        return login_name, password

    def register_teacher(self, first_name, last_name):
        login_name = first_name
        password = last_name
        self.cursor.execute('''
            INSERT INTO teachers (first_name, last_name)
            VALUES (?, ?)
        ''', (first_name, last_name))
        self.conn.commit()
        return login_name, password

    def create_group(self, name):
        self.cursor.execute('''
            INSERT INTO groups (name)
            VALUES (?)
        ''', (name,))
        self.conn.commit()

    def create_subject(self, name):
        self.cursor.execute('''
            INSERT INTO subjects (name)
            VALUES (?)
        ''', (name,))
        self.conn.commit()

    def assign_teacher_to_subject(self, teacher_id, subject_id):
        self.cursor.execute('''
            INSERT INTO grades (teacher_id, subject_id, grade)
            VALUES (?, ?, NULL)
        ''', (teacher_id, subject_id))
        self.conn.commit()

    def assign_student_to_group(self, student_id, group_id):
        self.cursor.execute('''
            UPDATE students
            SET group_id = ?
            WHERE id = ?
        ''', (group_id, student_id))
        self.conn.commit()

    def assign_student_to_subject(self, student_id, subject_id):
        self.cursor.execute('''
            INSERT INTO enrollments (student_id, subject_id)
            VALUES (?, ?)
        ''', (student_id, subject_id))
        self.conn.commit()

    def enter_grade(self, student_id, subject_id, teacher_id, grade):
        self.cursor.execute('''
            UPDATE grades
            SET grade = ?
            WHERE student_id = ? AND subject_id = ? AND teacher_id = ?
        ''', (grade, student_id, subject_id, teacher_id))
        self.conn.commit()

    def get_student_grades(self, student_id):
        self.cursor.execute('''
            SELECT s.first_name, s.last_name, sub.name, g.grade
            FROM grades g
            JOIN students s ON g.student_id = s.id
            JOIN subjects sub ON g.subject_id = sub.id
            WHERE s.id = ?
        ''', (student_id,))
        return self.cursor.fetchall()


# Example Usage
if __name__ == "__main__":
    system = AcademicSystem()

    # Administrator actions
    admin_login, admin_password = system.register_teacher("Admin", "Admin")
    system.create_group("GroupA")
    system.create_subject("Math")
    system.assign_teacher_to_subject(1, 1)

    student_login, student_password = system.register_student("John", "Doe", 1)
    system.assign_student_to_group(1, 1)
    system.assign_student_to_subject(1, 1)

    # Teacher actions
    teacher_login, teacher_password = system.register_teacher("Alice", "Teacher")
    system.enter_grade(1, 1, 2, 90)

    # Student actions
    grades = system.get_student_grades(1)
    print("Student Grades:", grades)
